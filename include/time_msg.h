#ifndef TIME_MSG_H_
#define TIME_MSG_H_

#include <iosfwd>
#include <map>
#include "common.h"
#include "clock_desc.h"

// Time Message
//  This unit defines a standard timing measurement message that all clocks in
//  the system use to send to the Detector and associated processing algorithms.
//  Two timestamps are reported: the message timestamp (which corresponds to
//  when the timing message itself was generated within the timeframe of the
//  detection monitor) and the origination timestamp (which is typically a
//  hardware timestamp as generated by the time source itself).  Elapsed time
//  versus the previous message is supported for both timestamps, and a vector
//  of comparisons versus other clock phase-times is included.  Streaming
//  operators are provided as well as parsers for both time messages and the
//  corresponding time message protocol header.
//
// Copyright (C) 2021, Lawrence Livermore National Security, LLC.
//  All rights reserved. LLNL-CODE-837067
//
// The Department of Homeland Security sponsored the production of this
//  material under DOE Contract Number DE-AC52-07N427344 for the management
//  and operation of Lawrence Livermore National Laboratory. Contract no.
//  DE-AC52-07NA27344 is between the U.S. Department of Energy (DOE) and
//  Lawrence Livermore National Security, LLC (LLNS) for the operation of LLNL.
//  See license for disclaimers, notice of U.S. Government Rights and license
//  terms and conditions.

namespace tmon
{

struct TimeMsgHeader
{
    std::string protocol_version;
    using RegistryMap = std::map<ClockId, ClockDesc>;
    RegistryMap clock_registry;

    static TimeMsgHeader parse(std::istream& is);
    std::string to_string() const;
};

struct TimeMsg
{
    using MsgClockType = std::chrono::system_clock;
    using MsgTimePointType = MsgClockType::time_point;
    using OrigClockType = std::chrono::steady_clock;
    using OrigTimePointType = OrigClockType::time_point;
    using DurationType = tmon::picoseconds;
    TimeMsg() : msg_creation{MsgClockType::now()}
    {
    }
    TimeMsg(tmon::ClockId id) : clock_id{id}, msg_creation{MsgClockType::now()}
    {
    }

    tmon::ClockId clock_id;
    // Timestamp as of the creation of this message
    MsgTimePointType msg_creation;
    // Timestamp at the time of origination (e.g., the original hardware
    //  timestamp, not when it was packaged in this message)
    OrigTimePointType orig_timestamp;
    optional<DurationType> time_since_last_msg;
    optional<DurationType> time_since_last_orig;
    struct Comparison
    {
        tmon::ClockId other_clock_id;
        DurationType time_versus_other;
    };
    std::vector<Comparison> comparisons;
};

std::ostream& operator<<(std::ostream& os, const TimeMsgHeader& header);
std::string to_string(const TimeMsgHeader& header);
std::ostream& operator<<(std::ostream& os, const TimeMsg& msg);
TimeMsg parse_time_msg(std::istream& is);
std::string to_string(const TimeMsg& msg);

// Exceptions
class ParseError : public std::runtime_error
{
  public:
    ParseError(const std::string& err) : std::runtime_error{err}
    {
    }
    ~ParseError() override = default;
};

} // end namespace

// Copyright (C) 2021, Lawrence Livermore National Security, LLC.
//  All rights reserved. LLNL-CODE-837067
//
// The Department of Homeland Security sponsored the production of this
//  material under DOE Contract Number DE-AC52-07N427344 for the management
//  and operation of Lawrence Livermore National Laboratory. Contract no.
//  DE-AC52-07NA27344 is between the U.S. Department of Energy (DOE) and
//  Lawrence Livermore National Security, LLC (LLNS) for the operation of LLNL.
//  See license for disclaimers, notice of U.S. Government Rights and license
//  terms and conditions.

#endif // TIME_MSG_H
